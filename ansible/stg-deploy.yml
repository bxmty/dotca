---
# Ansible playbook for setting up the Staging environment for dotca
# With optimizations for Next.js deployment

# Add a pre-task to fix temporary directory issues
- name: Fix temporary directory issues
  hosts: digitalocean
  become: true
  gather_facts: false
  tasks:
    - name: Ensure /tmp directory exists with proper permissions
      ansible.builtin.raw: |
        mkdir -p /tmp
        chmod 1777 /tmp
        df -h /tmp

- name: Setup Staging environment for dotca
  hosts: digitalocean
  become: true
  vars:
    project_name: dotca-nextjs
    git_repo_url: "{{ lookup('env', 'GIT_REPO_URL') }}"
    git_branch: staging
    app_dir: /app
    public_ip: "{{ ansible_host }}"
    brevo_api_key: "{{ lookup('env', 'BREVO_API_KEY') }}"
    stripe_secret_key: "{{ lookup('env', 'STRIPE_SECRET_KEY') }}"
    stripe_publishable_key: "{{ lookup('env', 'STRIPE_PUBLISHABLE_KEY') }}"
    ga_staging_id: "{{ lookup('env', 'GA_STAGING_ID') }}"
    docker_compose_file: "{{ app_dir }}/repo/docker-compose.yml"  # Added explicit file path

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Upgrade all packages
      apt:
        upgrade: yes

    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - git
          - python3-pip
          - jq
          - nginx
        state: present
        update_cache: yes

    - name: Add Docker's official GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        update_cache: yes

    - name: Install Docker Engine
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: yes
      register: docker_install_result
      retries: 3
      delay: 5
      until: docker_install_result is success

    - name: Install NTP for time synchronization
      apt:
        name: ntp
        state: present
        update_cache: yes

    - name: Configure NTP to use time.nist.gov
      lineinfile:
        path: /etc/ntp.conf
        regexp: '^server'
        line: 'server time.nist.gov iburst'
        state: present
        backup: yes

    - name: Restart NTP service
      systemd:
        name: ntp
        state: restarted
        enabled: yes

    - name: Set timezone to Eastern Time
      timezone:
        name: America/New_York

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes
      register: docker_service_result
      retries: 3
      delay: 5
      until: docker_service_result is success

    - name: Install Docker Compose V2
      block:
        - name: Create Docker CLI plugins directory
          file:
            path: /usr/local/lib/docker/cli-plugins
            state: directory
            mode: '0755'
        
        - name: Download Docker Compose V2
          get_url:
            url: https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64
            dest: /usr/local/lib/docker/cli-plugins/docker-compose
            mode: '0755'

        - name: Create symlink for docker-compose command
          file:
            src: /usr/local/lib/docker/cli-plugins/docker-compose
            dest: /usr/local/bin/docker-compose
            state: link
            mode: '0755'
      rescue:
        - name: Report Docker Compose installation failure
          debug:
            msg: "Failed to install Docker Compose. Will try one more time."
        
        - name: Second attempt to download Docker Compose V2
          get_url:
            url: https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64
            dest: /usr/local/lib/docker/cli-plugins/docker-compose
            mode: '0755'
            
        - name: Create symlink for docker-compose command (second attempt)
          file:
            src: /usr/local/lib/docker/cli-plugins/docker-compose
            dest: /usr/local/bin/docker-compose
            state: link
            mode: '0755'

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        mode: '0755'

    - name: Clone the repository
      git:
        repo: "{{ git_repo_url }}"
        dest: "{{ app_dir }}/repo"
        version: "{{ git_branch }}"
        force: yes
      register: git_clone
      retries: 3
      delay: 10
      until: git_clone is success

    - name: Verify Next.js configuration file
      stat:
        path: "{{ app_dir }}/repo/next.config.js"
      register: next_config

    - name: Fail if Next.js configuration is missing
      fail:
        msg: "Missing Next.js configuration file. Please ensure next.config.js exists in the repository."
      when: not next_config.stat.exists

    # DEPLOYMENT TASKS START HERE
    - name: Pull latest changes from git
      git:
        repo: "{{ git_repo_url }}"
        dest: "{{ app_dir }}/repo"
        version: "{{ git_branch }}"
        force: yes
        update: yes
      register: git_pull
      retries: 3
      delay: 5
      until: git_pull is success

    - name: Create .env file for docker-compose
      copy:
        dest: "{{ app_dir }}/repo/.env"
        mode: '0644'
        content: |
          NODE_ENV=production
          NEXT_PUBLIC_API_URL=http://{{ public_ip }}/api
          NEXT_PUBLIC_ENVIRONMENT=staging
          BREVO_API_KEY={{ brevo_api_key }}
          STRIPE_SECRET_KEY={{ stripe_secret_key }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY={{ stripe_publishable_key }}
          NEXT_PUBLIC_STAGING_GA_ID={{ ga_staging_id }}

    - name: Check if docker-compose or docker compose is available
      ansible.builtin.shell: |
        if command -v docker-compose &> /dev/null; then
          echo "docker-compose"
        elif docker compose version &> /dev/null; then
          echo "docker compose"
        else
          echo "none"
        fi
      register: docker_compose_cmd
      changed_when: false

    - name: Set docker compose command fact
      ansible.builtin.set_fact:
        compose_cmd: "{{ docker_compose_cmd.stdout }}"

    - name: Stop existing Docker Compose services
      ansible.builtin.shell: |
        {% if compose_cmd == "docker-compose" %}
        docker-compose down
        {% elif compose_cmd == "docker compose" %}
        docker compose down
        {% else %}
        echo "No docker compose available"
        exit 1
        {% endif %}
      args:
        chdir: "{{ app_dir }}/repo"
      ignore_errors: yes
      register: docker_down_result

    - name: Prune Docker system
      ansible.builtin.command:
        cmd: docker system prune -af

    - name: Build Docker images
      ansible.builtin.shell: |
        {% if compose_cmd == "docker-compose" %}
        DOCKER_BUILDKIT=1 docker-compose build --no-cache --build-arg BUILDKIT_INLINE_CACHE=1
        {% elif compose_cmd == "docker compose" %}
        DOCKER_BUILDKIT=1 docker compose build --no-cache --build-arg BUILDKIT_INLINE_CACHE=1
        {% else %}
        echo "No docker compose available"
        exit 1
        {% endif %}
      args:
        chdir: "{{ app_dir }}/repo"
      environment:
        DOCKER_BUILDKIT: 1
        COMPOSE_DOCKER_CLI_BUILD: 1
      register: docker_build
      retries: 2
      delay: 30
      until: docker_build is success

    - name: Start Docker Compose services
      ansible.builtin.shell: |
        {% if compose_cmd == "docker-compose" %}
        docker-compose up -d
        {% elif compose_cmd == "docker compose" %}
        docker compose up -d
        {% else %}
        echo "No docker compose available"
        exit 1
        {% endif %}
      args:
        chdir: "{{ app_dir }}/repo"
      register: docker_up
      retries: 2
      delay: 10
      until: docker_up is success

    - name: Display deployment completion message
      debug:
        msg: "Deployment completed successfully! Application is now available at http://{{ public_ip }}"

    - name: Configure Nginx worker processes
      copy:
        dest: /etc/nginx/nginx.conf
        content: |
          user www-data;
          worker_processes auto;
          pid /run/nginx.pid;
          include /etc/nginx/modules-enabled/*.conf;

          events {
            worker_connections 1024;
            multi_accept on;
          }

          http {
            sendfile on;
            tcp_nopush on;
            tcp_nodelay on;
            keepalive_timeout 65;
            types_hash_max_size 2048;
            server_tokens off;
            
            include /etc/nginx/mime.types;
            default_type application/octet-stream;

            # Optimize buffers
            client_body_buffer_size 10K;
            client_header_buffer_size 1k;
            client_max_body_size 8m;
            large_client_header_buffers 2 1k;
            
            # Timeouts
            client_body_timeout 12;
            client_header_timeout 12;
            keepalive_timeout 15;
            send_timeout 10;
            
            # Enable gzip
            gzip on;
            gzip_comp_level 2;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain application/x-javascript text/xml text/css application/xml application/json;
            
            ssl_protocols TLSv1.2 TLSv1.3;
            ssl_prefer_server_ciphers on;
            
            access_log /var/log/nginx/access.log;
            error_log /var/log/nginx/error.log;

            include /etc/nginx/conf.d/*.conf;
            include /etc/nginx/sites-enabled/*;
          }

    - name: Configure Nginx as reverse proxy
      copy:
        dest: /etc/nginx/sites-available/nextjs-app
        content: |
          server {
              listen 80;
              server_name _;
              
              # Add basic health check endpoint
              location /health {
                  access_log off;
                  add_header Content-Type text/plain;
                  return 200 'OK';
              }
              
              location / {
                  proxy_pass http://localhost:8080;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  
                  # Caching
                  proxy_cache_valid 200 302 10m;
                  proxy_cache_valid 404 1m;
              }
          }

    - name: Enable Nginx site configuration
      file:
        src: /etc/nginx/sites-available/nextjs-app
        dest: /etc/nginx/sites-enabled/nextjs-app
        state: link

    - name: Remove default Nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      ignore_errors: yes

    - name: Test Nginx configuration
      command: nginx -t
      register: nginx_test
      changed_when: false
      ignore_errors: true

    - name: Display Nginx test results
      debug:
        msg: "{{ nginx_test.stderr_lines }}"
      when: nginx_test.rc != 0

    - name: Restart Nginx
      systemd:
        name: nginx
        state: restarted
        enabled: yes
      when: nginx_test.rc == 0
      register: nginx_restart
      retries: 2
      delay: 5
      until: nginx_restart is success

    - name: Setup firewall (UFW)
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - '22'
        - '80'
        - '443'
        - '6080'
        - '8080'

    - name: Enable UFW
      ufw:
        state: enabled
        policy: deny

    - name: Create enhanced monitoring script
      copy:
        dest: "{{ app_dir }}/monitor.sh"
        mode: '0755'
        content: |
          #!/bin/bash
          
          # Enhanced monitoring script with better retry logic
          LOG_FILE="{{ app_dir }}/monitoring.log"
          
          # Function to log messages
          log_message() {
            echo "[$(date)] $1" | tee -a $LOG_FILE
          }
          
          # Application health check
          HEALTH_CHECK_URL="http://localhost/health"
          MAX_RETRIES=3
          
          log_message "Starting health check..."
          
          # Check if Docker is running
          if ! systemctl is-active --quiet docker; then
            log_message "Docker service is not running! Attempting to restart..."
            systemctl restart docker
            sleep 10
          fi
          
          # Check available disk space
          DISK_SPACE=$(df -h /tmp | awk 'NR==2 {print $5}' | sed 's/%//')
          if [ "$DISK_SPACE" -gt 90 ]; then
            log_message "Disk space low ($DISK_SPACE%). Cleaning up Docker..."
            docker system prune -af --volumes
          fi
          
          # Check Docker container status using docker-compose format
          cd {{ app_dir }}/repo
          if ! docker compose ps | grep -q "Up"; then
            log_message "Containers not running properly! Attempting to restart..."
            docker compose down
            docker compose up -d
            sleep 15
          fi
          
          # Application health check with retries
          for i in $(seq 1 $MAX_RETRIES); do
            if curl -s -f -o /dev/null -w "%{http_code}" $HEALTH_CHECK_URL | grep -q "200"; then
              log_message "Application is healthy."
              exit 0
            else
              log_message "Health check failed (attempt $i/$MAX_RETRIES). Waiting before retry..."
              sleep 10
            fi
          done
          
          log_message "Application not responding after $MAX_RETRIES attempts. Restarting services..."
          
          # Restart application services
          cd {{ app_dir }}/repo && docker compose down && docker compose up -d
          sleep 5
          systemctl restart nginx
          
          # Final check
          if curl -s -f -o /dev/null -w "%{http_code}" $HEALTH_CHECK_URL | grep -q "200"; then
            log_message "Application is now healthy after restart."
          else
            log_message "WARNING: Application still unhealthy after restart. Manual intervention required!"
          fi
      
    - name: Set up monitoring cron job
      cron:
        name: "Monitor dotca-nextjs"
        minute: "*/15"
        job: "{{ app_dir }}/monitor.sh >> {{ app_dir }}/monitoring.log 2>&1"
        state: present

# Create a separate play for Let's Encrypt setup
- name: Setup Let's Encrypt with Nginx
  hosts: digitalocean
  become: yes
  vars:
    domain_name: "staging.boximity.ca"
    email_address: "matticem@boximity.ca"
  
  tasks:
    - name: Install Certbot and Nginx plugin
      package:
        name:
          - certbot
          - python3-certbot-nginx
        state: present
      register: certbot_install
      retries: 3
      delay: 5
      until: certbot_install is success

    - name: Check if certificate already exists
      stat:
        path: /etc/letsencrypt/live/{{ domain_name }}/cert.pem
      register: cert_file

    - name: Restart Nginx before certificate request
      systemd:
        name: nginx
        state: restarted
        enabled: yes

    - name: Obtain SSL certificate
      command: >
        certbot --nginx -d {{ domain_name }}
        --non-interactive --agree-tos 
        --email {{ email_address }}
        --redirect
      when: not cert_file.stat.exists
      register: certbot_result
      retries: 2
      delay: 30
      until: certbot_result is success
      
    - name: Log certificate generation results
      debug:
        msg: "Certbot output: {{ certbot_result.stdout_lines | default(['No output']) }}"
      when: not cert_file.stat.exists and certbot_result is defined

    - name: Add cron job for auto-renewal
      cron:
        name: "Let's Encrypt renewal"
        special_time: daily
        job: "certbot renew --quiet --nginx"
