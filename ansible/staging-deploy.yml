---
# Ansible playbook for setting up the Staging environment for dotca
# With optimizations for Next.js deployment and Nginx reverse proxy

- name: Setup Staging environment for dotca
  hosts: digitalocean
  become: true
  vars:
    project_name: dotca-nextjs
    git_repo_url: "{{ lookup('env', 'GIT_REPO_URL') }}"
    git_branch: staging
    app_dir: /app
    public_ip: "{{ ansible_host }}"
    brevo_api_key: "{{ lookup('env', 'BREVO_API_KEY') }}"
    stripe_secret_key: "{{ lookup('env', 'STRIPE_SECRET_KEY') }}"
    stripe_publishable_key: "{{ lookup('env', 'STRIPE_PUBLISHABLE_KEY') }}"
    ga_staging_id: "{{ lookup('env', 'GA_STAGING_ID') }}"
    
  tasks:
    # Add swap space to help with memory limitations
    - name: Check if swap file exists
      stat:
        path: /swapfile
      register: swap_file_check

    - name: Create swap file if it doesn't exist
      command: dd if=/dev/zero of=/swapfile bs=1M count=2048
      when: not swap_file_check.stat.exists

    - name: Set permissions on swap file
      file:
        path: /swapfile
        mode: 0600
      when: not swap_file_check.stat.exists

    - name: Format swap file
      command: mkswap /swapfile
      when: not swap_file_check.stat.exists

    - name: Enable swap file
      command: swapon /swapfile
      when: not swap_file_check.stat.exists

    - name: Add swap to fstab
      lineinfile:
        path: /etc/fstab
        line: "/swapfile none swap sw 0 0"
        state: present
      when: not swap_file_check.stat.exists

    # Configure vm.swappiness for better performance
    - name: Set vm.swappiness
      sysctl:
        name: vm.swappiness
        value: '10'
        state: present
        reload: yes

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Upgrade all packages
      apt:
        upgrade: yes

    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - git
          - python3-pip
          - jq
          - nginx
        state: present
        update_cache: yes

    - name: Add Docker's official GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        update_cache: yes

    - name: Install Docker Engine
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: yes

    - name: Install NTP for time synchronization
      apt:
        name: ntp
        state: present
        update_cache: yes

    - name: Configure NTP to use time.nist.gov
      lineinfile:
        path: /etc/ntp.conf
        regexp: '^server'
        line: 'server time.nist.gov iburst'
        state: present
        backup: yes

    - name: Restart NTP service
      systemd:
        name: ntp
        state: restarted
        enabled: yes

    - name: Set timezone to Eastern Time
      timezone:
        name: America/New_York

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Install Docker Compose V2
      block:
        - name: Create Docker CLI plugins directory
          file:
            path: /usr/local/lib/docker/cli-plugins
            state: directory
            mode: '0755'
        
        - name: Download Docker Compose V2
          get_url:
            url: https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64
            dest: /usr/local/lib/docker/cli-plugins/docker-compose
            mode: '0755'

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        mode: '0755'

    - name: Clone the repository
      git:
        repo: "{{ git_repo_url }}"
        dest: "{{ app_dir }}/repo"
        version: "{{ git_branch }}"
        force: yes

    - name: Verify Next.js configuration file
      stat:
        path: "{{ app_dir }}/repo/next.config.js"
      register: next_config

    - name: Fail if Next.js configuration is missing
      fail:
        msg: "Missing Next.js configuration file. Please ensure next.config.js exists in the repository."
      when: not next_config.stat.exists

    - name: Create .env file for docker-compose
      copy:
        dest: "{{ app_dir }}/repo/.env"
        content: |
          NODE_ENV=production
          NEXT_PUBLIC_API_URL=http://{{ public_ip }}/api
          NEXT_PUBLIC_ENVIRONMENT=staging
          BREVO_API_KEY={{ brevo_api_key }}
          STRIPE_SECRET_KEY={{ stripe_secret_key }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY={{ stripe_publishable_key }}
          NEXT_PUBLIC_STAGING_GA_ID={{ ga_staging_id }}
      
    - name: Pull latest changes from repository
      git:
        repo: "{{ git_repo_url }}"
        dest: "{{ app_dir }}/repo"
        version: "{{ git_branch }}"
        force: yes
        update: yes
      
    - name: Stop any running containers
      ansible.builtin.command:
        cmd: docker compose down
        chdir: "{{ app_dir }}/repo"
      ignore_errors: yes
      
    # Clear Docker cache before building to free up space
    - name: Prune Docker system
      ansible.builtin.command:
        cmd: docker system prune -af
      
    # Build with limited resources and single worker
    - name: Build Docker images with resource limits
      ansible.builtin.command:
        cmd: DOCKER_BUILDKIT=1 docker compose build --no-cache --build-arg BUILDKIT_INLINE_CACHE=1 --build-arg NODE_OPTIONS="--max_old_space_size=512"
        chdir: "{{ app_dir }}/repo"
      environment:
        DOCKER_BUILDKIT: 1
        COMPOSE_DOCKER_CLI_BUILD: 1
      
    - name: Start Docker containers with resource limits
      ansible.builtin.command:
        cmd: docker compose up -d --memory=768m --memory-swap=1536m
        chdir: "{{ app_dir }}/repo"
      
    - name: Display completion message
      debug:
        msg: "Deployment completed successfully! Application is now behind nginx at http://{{ public_ip }}"

    # Configure Nginx as reverse proxy with optimized settings
    - name: Configure Nginx as reverse proxy with optimized settings
      copy:
        dest: /etc/nginx/sites-available/nextjs-app
        content: |
          # Optimize worker processes and connections
          worker_processes 1;
          events {
            worker_connections 512;
            multi_accept on;
          }
          
          http {
            # Optimize buffers
            client_body_buffer_size 10K;
            client_header_buffer_size 1k;
            client_max_body_size 8m;
            large_client_header_buffers 2 1k;
            
            # Timeouts
            client_body_timeout 12;
            client_header_timeout 12;
            keepalive_timeout 15;
            send_timeout 10;
            
            # Enable gzip
            gzip on;
            gzip_comp_level 2;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain application/x-javascript text/xml text/css application/xml;
            
            server {
                listen 80;
                server_name _;
                
                location / {
                    proxy_pass http://localhost:8080;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_cache_bypass $http_upgrade;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    
                    # Memory optimization - caching
                    proxy_cache_valid 200 302 10m;
                    proxy_cache_valid 404 1m;
                }
            }
          }

    - name: Enable the Nginx site
      file:
        src: /etc/nginx/sites-available/nextjs-app
        dest: /etc/nginx/sites-enabled/nextjs-app
        state: link

    - name: Remove default Nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      ignore_errors: yes

    - name: Test Nginx configuration
      command: nginx -t
      register: nginx_test
      changed_when: false
      ignore_errors: true

    - name: Restart Nginx
      systemd:
        name: nginx
        state: restarted
        enabled: yes
      when: nginx_test.rc == 0

# Removed redundant deploy script call - already handled by docker compose steps above

    - name: Setup firewall (UFW)
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - '22'
        - '80'
        - '443'
        - '6080'

    - name: Enable UFW
      ufw:
        state: enabled
        policy: deny

    - name: Set up Cron job for regular deployments (optional)
      cron:
        name: "Regular deployment of dotca-nextjs"
        special_time: daily
        job: "{{ app_dir }}/deploy.sh >> {{ app_dir }}/deployment.log 2>&1"
        state: absent  # Change to 'present' if you want to enable this

    - name: Create monitoring script (for basic health checks)
      copy:
        dest: "{{ app_dir }}/monitor.sh"
        mode: '0755'
        content: |
          #!/bin/bash
          
          # Simple monitoring script for the Next.js application
          # Check memory usage and clean if needed
          MEM_AVAIL=$(free -m | grep Mem | awk '{print $7}')
          
          if [ $MEM_AVAIL -lt 100 ]; then
            echo "[$(date)] Low memory: $MEM_AVAIL MB available. Cleaning cache..."
            sync; echo 3 > /proc/sys/vm/drop_caches
            
            # If Docker is using too much memory, consider restarting service
            DOCKER_MEM=$(ps aux | grep docker | awk '{sum+=$6} END {print sum/1024}' | cut -d. -f1)
            if [ $DOCKER_MEM -gt 500 ]; then
              echo "[$(date)] Docker using too much memory: $DOCKER_MEM MB. Restarting..."
              systemctl restart docker
            fi
          fi
          
          # Application health check
          if ! curl -s -f http://localhost:80 > /dev/null; then
            echo "[$(date)] Application not responding. Attempting restart..."
            cd {{ app_dir }}/repo && docker compose restart web
            systemctl restart nginx
          else
            echo "[$(date)] Application is healthy."
          fi
      
    - name: Set up monitoring cron job
      cron:
        name: "Monitor dotca-nextjs"
        minute: "*/15"
        job: "{{ app_dir }}/monitor.sh >> {{ app_dir }}/monitoring.log 2>&1"
        state: present

# Create a separate play for Let's Encrypt setup
- name: Setup Let's Encrypt with Nginx
  hosts: digitalocean  # Changed from webservers to match the host group in your first play
  become: yes
  vars:
    domain_name: "staging19.boximity.ca"
    email_address: "matticem@boximity.ca"
  
  tasks:
    - name: Install Certbot and Nginx plugin
      package:
        name:
          - certbot
          - python3-certbot-nginx
        state: present

    - name: Check if certificate already exists
      stat:
        path: /etc/letsencrypt/live/{{ domain_name }}/cert.pem
      register: cert_file

    - name: Configure Nginx for SSL domain
      copy:
        dest: /etc/nginx/sites-available/{{ domain_name }}
        content: |
          server {
            listen 80;
            server_name {{ domain_name }};
            
            location / {
                proxy_pass http://localhost:8080;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_cache_bypass $http_upgrade;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            }
          }

    - name: Enable new domain configuration
      file:
        src: /etc/nginx/sites-available/{{ domain_name }}
        dest: /etc/nginx/sites-enabled/{{ domain_name }}
        state: link

    - name: Restart Nginx before certificate request
      systemd:
        name: nginx
        state: restarted
        enabled: yes

    - name: Obtain SSL certificate
      command: >
        certbot --nginx -d {{ domain_name }}
        --non-interactive --agree-tos 
        --email {{ email_address }}
        --redirect
      when: not cert_file.stat.exists

    - name: Add cron job for auto-renewal
      cron:
        name: "Let's Encrypt renewal"
        special_time: daily
        job: "certbot renew --quiet --nginx"
