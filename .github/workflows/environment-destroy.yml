name: Environment Destroy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy (staging or production)'
        required: true
        type: choice
        options:
          - staging
          - production
      confirmation:
        description: 'Type "destroy-{environment}" to confirm destruction (e.g., destroy-staging)'
        required: true
        type: string

jobs:
  destroy-environment:
    name: Destroy ${{ github.event.inputs.environment }} Environment
    runs-on: ubuntu-latest
    if: github.event.inputs.confirmation == format('destroy-{0}', github.event.inputs.environment)
    
    steps:
      - name: Validate Environment
        run: |
          if [[ "${{ github.event.inputs.environment }}" != "staging" && "${{ github.event.inputs.environment }}" != "production" ]]; then
            echo "‚ùå Invalid environment. Only 'staging' and 'production' are allowed."
            exit 1
          fi
          echo "‚úÖ Environment '${{ github.event.inputs.environment }}' is valid"
          
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
          
      - name: Setup DigitalOcean CLI
        run: |
          curl -sL https://github.com/digitalocean/doctl/releases/download/v1.94.0/doctl-1.94.0-linux-amd64.tar.gz | tar -xzv
          sudo mv doctl /usr/local/bin/
          doctl auth init -t ${{ secrets.DO_TOKEN }}
          
      - name: Initialize Terraform
        working-directory: ./terraform
        run: |
          terraform init \
            -backend-config="access_key=${{ secrets.SPACES_ACCESS_ID }}" \
            -backend-config="secret_key=${{ secrets.SPACES_SECRET_KEY }}" \
            -backend-config="key=dotca/terraform-${{ github.event.inputs.environment }}.tfstate"
        
      - name: Set Git Branch
        id: set_branch
        run: |
          if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            echo "git_branch=main" >> $GITHUB_OUTPUT
          else
            echo "git_branch=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Terraform Plan Destroy
        working-directory: ./terraform
        run: |
          terraform plan -destroy \
            -var="do_token=${{ secrets.DO_TOKEN }}" \
            -var="ssh_key_fingerprint=${{ secrets.SSH_KEY_FINGERPRINT }}" \
            -var="git_repo_url=${{ github.server_url }}/${{ github.repository }}.git" \
            -var="git_branch=${{ steps.set_branch.outputs.git_branch }}" \
            -var="environment=${{ github.event.inputs.environment }}" \
            -out=tfdestroyplan
        
      - name: Terraform Destroy
        working-directory: ./terraform
        run: terraform apply -auto-approve tfdestroyplan
        
      - name: Destruction Notification
        run: |
          echo "üóëÔ∏è ${{ github.event.inputs.environment }} environment has been destroyed successfully!"