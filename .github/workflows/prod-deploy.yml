name: Production Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
    
  setup-infra:
    name: Setup Infrastructure
    runs-on: ubuntu-latest
    outputs:
      droplet_ip: ${{ steps.resource_check.outputs.ip || steps.get_ip.outputs.ip }}
      resources_exist: ${{ steps.resource_check.outputs.resources_exist }}
      terraform_changes: ${{ steps.check_terraform_changes.outputs.has_changes }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
          
      - name: Setup DigitalOcean CLI
        run: |
          curl -sL https://github.com/digitalocean/doctl/releases/download/v1.94.0/doctl-1.94.0-linux-amd64.tar.gz | tar -xzv
          sudo mv doctl /usr/local/bin/
          doctl auth init -t ${{ secrets.DO_TOKEN }}
      
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
          
      - name: Initialize Terraform
        working-directory: ./terraform
        run: |
          terraform init \
            -backend-config="access_key=${{ secrets.SPACES_ACCESS_ID }}" \
            -backend-config="secret_key=${{ secrets.SPACES_SECRET_KEY }}" \
            -backend-config="key=dotca/terraform-production.tfstate"
          
      - name: Check if project exists
        id: check_project
        run: |
            # Check if the project exists in Digital Ocean
            PROJECT_EXISTS=$(doctl projects list --format Name --no-header | grep -F "dotca-nextjs" || echo "")
            
            if [ -n "$PROJECT_EXISTS" ]; then
              echo "PROJECT_EXISTS=true" >> $GITHUB_ENV
              echo "Project 'dotca-nextjs' already exists"
            else
              echo "PROJECT_EXISTS=false" >> $GITHUB_ENV
              echo "Project 'dotca-nextjs' does not exist"
            fi
        
      - name: Check if resources exist
        working-directory: ./terraform
        id: resource_check
        run: |
          # Set terraform variables
          export TF_VAR_do_token="${{ secrets.DO_TOKEN }}"
          export TF_VAR_ssh_key_fingerprint="${{ secrets.SSH_KEY_FINGERPRINT }}"
          export TF_VAR_git_repo_url="${{ github.server_url }}/${{ github.repository }}.git"
          export TF_VAR_git_branch="main"
          export TF_VAR_use_existing_project="${{ env.PROJECT_EXISTS }}"
          export TF_VAR_use_existing_firewall="false"
          export TF_VAR_environment="production"
          
          # Try to get current state - handle failure gracefully
          terraform refresh || echo "Terraform refresh failed, likely because resources don't exist yet"
          
          # Check if resources exist by trying to get the IP
          DROPLET_IP=$(terraform output droplet_ip 2>/dev/null | tr -d '"' | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' || echo "")
          
          if [ -n "$DROPLET_IP" ]; then
            echo "RESOURCES_EXIST=true" >> $GITHUB_ENV
            echo "resources_exist=true" >> $GITHUB_OUTPUT
            echo "DROPLET_IP=$DROPLET_IP" >> $GITHUB_ENV
            echo "ip=$DROPLET_IP" >> $GITHUB_OUTPUT
            echo "Resources already exist, using IP: $DROPLET_IP"
          else
            echo "RESOURCES_EXIST=false" >> $GITHUB_ENV
            echo "resources_exist=false" >> $GITHUB_OUTPUT
            echo "Resources need to be created or updated"
          fi
        continue-on-error: true
      
      - name: Check for Terraform changes
        id: check_terraform_changes
        working-directory: ./terraform
        if: env.RESOURCES_EXIST == 'true'
        run: |
          # Set terraform variables as environment variables
          export TF_VAR_do_token="${{ secrets.DO_TOKEN }}"
          export TF_VAR_ssh_key_fingerprint="${{ secrets.SSH_KEY_FINGERPRINT }}"
          export TF_VAR_git_repo_url="${{ github.server_url }}/${{ github.repository }}.git"
          export TF_VAR_git_branch="main"
          export TF_VAR_use_existing_project="${{ env.PROJECT_EXISTS }}"
          export TF_VAR_use_existing_firewall="false"
          export TF_VAR_environment="production"
          
          # Create a plan and check if there are any changes
          terraform plan -detailed-exitcode -out=tfplan > plan_output.txt 2>&1
          PLAN_EXIT_CODE=$?
          
          # Terraform plan exit codes:
          # 0 = No changes
          # 1 = Error
          # 2 = Changes present
          
          if [ $PLAN_EXIT_CODE -eq 2 ]; then
            echo "HAS_CHANGES=true" >> $GITHUB_ENV
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in Terraform plan"
            echo "::notice::Changes detected in Terraform plan for production infrastructure"
          elif [ $PLAN_EXIT_CODE -eq 0 ]; then
            echo "HAS_CHANGES=false" >> $GITHUB_ENV
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected in Terraform plan"
          else
            echo "::error::Terraform plan failed with exit code $PLAN_EXIT_CODE"
            cat plan_output.txt
            exit 1
          fi
        continue-on-error: true
      
      - name: Approve infrastructure changes
        if: env.RESOURCES_EXIST == 'true' && env.HAS_CHANGES == 'true'
        run: |
          echo "::warning::Terraform detected changes to production infrastructure"
          echo "Proceeding with infrastructure changes..."
      
      - name: Apply Terraform changes
        if: env.RESOURCES_EXIST == 'true' && env.HAS_CHANGES == 'true'
        working-directory: ./terraform
        run: |
          # Set terraform variables as environment variables
          export TF_VAR_do_token="${{ secrets.DO_TOKEN }}"
          export TF_VAR_ssh_key_fingerprint="${{ secrets.SSH_KEY_FINGERPRINT }}"
          export TF_VAR_git_repo_url="${{ github.server_url }}/${{ github.repository }}.git"
          export TF_VAR_git_branch="main"
          export TF_VAR_use_existing_project="${{ env.PROJECT_EXISTS }}"
          export TF_VAR_use_existing_firewall="false"
          export TF_VAR_environment="production"
          
          # Apply the changes
          echo "Applying changes to existing production infrastructure..."
          terraform apply -auto-approve tfplan
          
          # Update the droplet IP in case it changed
          UPDATED_IP=$(terraform output droplet_ip | tr -d '"' | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')
          if [ -n "$UPDATED_IP" ]; then
            echo "DROPLET_IP=$UPDATED_IP" >> $GITHUB_ENV
            echo "Updated droplet IP: $UPDATED_IP"
          fi

      - name: Terraform Plan
        if: env.RESOURCES_EXIST != 'true'
        working-directory: ./terraform
        run: |
          # Set terraform variables as environment variables
          export TF_VAR_do_token="${{ secrets.DO_TOKEN }}"
          export TF_VAR_ssh_key_fingerprint="${{ secrets.SSH_KEY_FINGERPRINT }}"
          export TF_VAR_git_repo_url="${{ github.server_url }}/${{ github.repository }}.git"
          export TF_VAR_git_branch="main"
          export TF_VAR_use_existing_project="${{ env.PROJECT_EXISTS }}"
          export TF_VAR_use_existing_firewall="false"
          export TF_VAR_environment="production"
          
          # Create plan
          terraform plan -out=tfplan
          
      - name: Approve new infrastructure
        if: env.RESOURCES_EXIST != 'true'
        run: |
          echo "::notice::Creating new production infrastructure"
          echo "Proceeding with new infrastructure creation..."
        
      - name: Terraform Apply
        if: env.RESOURCES_EXIST != 'true'
        working-directory: ./terraform
        run: |
          # Set terraform variables as environment variables
          export TF_VAR_do_token="${{ secrets.DO_TOKEN }}"
          export TF_VAR_ssh_key_fingerprint="${{ secrets.SSH_KEY_FINGERPRINT }}"
          export TF_VAR_git_repo_url="${{ github.server_url }}/${{ github.repository }}.git"
          export TF_VAR_git_branch="main"
          export TF_VAR_use_existing_project="${{ env.PROJECT_EXISTS }}"
          export TF_VAR_use_existing_firewall="false"
          export TF_VAR_environment="production"
          
          # Apply the plan
          terraform apply -auto-approve tfplan
        
      - name: Capture Droplet IP
        if: env.RESOURCES_EXIST != 'true'
        working-directory: ./terraform
        id: get_ip
        run: |
          # Wait for Terraform state to settle
          echo "Waiting for DigitalOcean resources to be fully provisioned..."
          sleep 30
          
          # Force a refresh to ensure state is current
          export TF_VAR_do_token="${{ secrets.DO_TOKEN }}"
          export TF_VAR_ssh_key_fingerprint="${{ secrets.SSH_KEY_FINGERPRINT }}"
          export TF_VAR_git_repo_url="${{ github.server_url }}/${{ github.repository }}.git"
          export TF_VAR_git_branch="main"
          export TF_VAR_use_existing_project="${{ env.PROJECT_EXISTS }}"
          export TF_VAR_use_existing_firewall="false"
          export TF_VAR_environment="production"
          terraform refresh
          
          # Try multiple methods to get the IP address
          echo "Attempting to get droplet IP address..."
          
          # Method 1: Direct output to a file first to avoid pipe issues
          terraform output > terraform_output.txt
          cat terraform_output.txt
          
          # Extract IP using grep directly on the file
          DROPLET_IP=$(grep -oE 'droplet_ip\s*=\s*"([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)"' terraform_output.txt | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' || echo "")
          
          # If that didn't work, try a simpler approach
          if [ -z "$DROPLET_IP" ] || ! [[ $DROPLET_IP =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Trying alternative method..."
            DROPLET_IP=$(cat terraform_output.txt | grep droplet_ip | awk -F '"' '{print $2}' || echo "")
          fi
          
          # Final validation and output
          if [[ $DROPLET_IP =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Successfully extracted IP: $DROPLET_IP"
            echo "DROPLET_IP=$DROPLET_IP" >> $GITHUB_ENV
            echo "ip=$DROPLET_IP" >> $GITHUB_OUTPUT
          else
            echo "::error::Failed to extract valid IP address from Terraform output"
            echo "Raw terraform output was:"
            cat terraform_output.txt
            exit 1
          fi

  deploy-app:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [setup-infra]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible
      
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      
      - name: Add host key to known hosts
        env:
          DROPLET_IP: ${{ needs.setup-infra.outputs.droplet_ip }}
          RESOURCES_EXIST: ${{ needs.setup-infra.outputs.resources_exist }}
          TERRAFORM_CHANGES: ${{ needs.setup-infra.outputs.terraform_changes }}
        run: |
          # Fail if we don't have an IP address
          if [ -z "$DROPLET_IP" ]; then
            echo "::error::Could not determine server IP address - infrastructure setup failed"
            exit 1
          fi
          
          echo "Connecting to IP: $DROPLET_IP"
          
          # Wait longer for new or updated resources to be fully ready
          if [ "$RESOURCES_EXIST" != "true" ] || [ "$TERRAFORM_CHANGES" == "true" ]; then
            echo "Waiting for droplet to be fully ready..."
            # Try to ping the droplet until it's accessible
            TIMEOUT=300
            INTERVAL=10
            ELAPSED=0
            while [ $ELAPSED -lt $TIMEOUT ]; do
              echo "Attempting to ping $DROPLET_IP... (${ELAPSED}s elapsed)"
              if ping -c 1 -W 5 $DROPLET_IP &> /dev/null; then
                echo "Successfully reached droplet at $DROPLET_IP"
                break
              fi
              sleep $INTERVAL
              ELAPSED=$((ELAPSED + INTERVAL))
            done
            
            if [ $ELAPSED -ge $TIMEOUT ]; then
              echo "::warning::Droplet at $DROPLET_IP is not responding to ping after ${TIMEOUT}s"
              # Continue anyway, since SSH might still work
            fi
            
            # Additional wait time for services to start
            echo "Waiting additional time for services to start..."
            sleep 30
          fi
          
          # Add host key to known_hosts
          echo "Adding host key for $DROPLET_IP to known_hosts..."
          for i in {1..5}; do
            if ssh-keyscan -H $DROPLET_IP >> ~/.ssh/known_hosts 2>/dev/null; then
              echo "Successfully added host key on attempt $i"
              break
            else
              echo "Attempt $i to add host key failed, retrying in 10 seconds..."
              sleep 10
            fi
            
            if [ $i -eq 5 ]; then
              echo "::warning::Failed to add host key after 5 attempts, continuing anyway..."
            fi
          done
      
      - name: Deploy using Ansible
        env:
          GIT_REPO_URL: "${{ github.server_url }}/${{ github.repository }}.git"
          SSH_KEY_PATH: "~/.ssh/id_rsa"
          GITHUB_ACTIONS: "true"
          DROPLET_IP: ${{ needs.setup-infra.outputs.droplet_ip }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
          EMAIL_ADDRESS: ${{ secrets.EMAIL_ADDRESS }}
          BREVO_API_KEY: ${{ secrets.BREVO_API_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          GA_PRODUCTION_ID: ${{ secrets.GA_PRODUCTION_ID }}
          OTEL_EXPORTER_OTLP_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          # Verify IP address is set in the environment
          if [ -z "$DROPLET_IP" ]; then
            echo "::error::DROPLET_IP environment variable is not set"
            exit 1
          fi
          
          echo "Using Droplet IP: $DROPLET_IP for deployment"
          
          # Set up ansible inventory dynamically
          echo "[digitalocean]" > inventory.ini
          echo "$DROPLET_IP ansible_user=root ansible_ssh_private_key_file=~/.ssh/id_rsa ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=30'" >> inventory.ini
          cat inventory.ini
          
          # Copy production ansible playbook
          cp production-deploy.yml ./deploy-playbook.yml
          
          # Test SSH connection
          echo "Testing SSH connection to $DROPLET_IP..."
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i ~/.ssh/id_rsa root@$DROPLET_IP "echo SSH connection successful" || { echo "SSH connection test failed, but continuing deployment anyway"; }
          
          # Run the deployment with retry logic
          echo "Starting deployment..."
          DEPLOY_SUCCESS=false
          for i in {1..3}; do
            echo "Deployment attempt $i..."
            if ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory.ini deploy-playbook.yml; then
              echo "Deployment successful on attempt $i"
              DEPLOY_SUCCESS=true
              break
            else
              echo "Deployment attempt $i failed. Waiting before retry..."
              sleep 30
            fi
          done
          
          if [ "$DEPLOY_SUCCESS" != "true" ]; then
            echo "::error::All deployment attempts failed"
            echo "ansible_failed=true" >> $GITHUB_OUTPUT
            exit 1  # This ensures the job fails if all deployment attempts fail
          fi
  
  deployment-verification:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [setup-infra, deploy-app]
    
    steps:
      - name: Production Deployment Status
        env:
          DROPLET_IP: ${{ needs.setup-infra.outputs.droplet_ip }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
        run: |
          echo "✅ Production environment has been deployed with Ansible!"
          echo "🌐 Access it at https://$DOMAIN_NAME/ (IP: $DROPLET_IP)"
          
          # Health check with retry logic
          MAX_RETRIES=12
          RETRY_INTERVAL=10
          HEALTH_CHECK_URL="https://$DOMAIN_NAME/health"
          
          echo "Performing health checks..."
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Health check attempt $i of $MAX_RETRIES..."
            HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$HEALTH_CHECK_URL" || echo "failed")
            
            if [ "$HEALTH_STATUS" == "200" ]; then
              echo "✅ Application is up and running! Health check passed."
              exit 0
            else
              echo "Health check returned: $HEALTH_STATUS. Waiting ${RETRY_INTERVAL}s before retry..."
              sleep $RETRY_INTERVAL
            fi
          done
          
          echo "⚠️ Warning: Health checks did not pass within expected time."
          echo "::warning::Health checks to $HEALTH_CHECK_URL did not pass within expected time frame. Application may still be starting up."

  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: [deployment-verification]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Chrome
        run: |
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
      
      - name: Run E2E tests
        env:
          APP_URL: https://${{ secrets.DOMAIN_NAME }}
          TEST_MODE: production
        run: npm run test:e2e
        continue-on-error: true  # Don't fail the pipeline if some tests fail
        
      - name: Run API integration tests
        env:
          API_URL: https://${{ secrets.DOMAIN_NAME }}/api
          TEST_MODE: production
        run: npm run test:api
        continue-on-error: true  # Don't fail the pipeline if some tests fail

  performance-test:
    name: Run Performance Tests
    runs-on: ubuntu-latest
    needs: [deployment-verification]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: Run performance tests
        env:
          TARGET_URL: https://${{ secrets.DOMAIN_NAME }}
        run: |
          # Create a simple k6 script to test the homepage
          cat > performance-test.js << 'EOF'
          import http from 'k6/http';
          import { sleep, check } from 'k6';
          
          export const options = {
            vus: 5,
            duration: '30s',
            thresholds: {
              http_req_duration: ['p(95)<500'],  // 95% of requests should complete below 500ms
              http_req_failed: ['rate<0.01'],   // Less than 1% of requests should fail
            },
          };
          
          export default function() {
            const res = http.get(process.env.TARGET_URL);
            check(res, {
              'status is 200': (r) => r.status === 200,
              'content type is text/html': (r) => r.headers['Content-Type'] && r.headers['Content-Type'].includes('text/html'),
            });
            sleep(1);
          }
          EOF
          
          k6 run performance-test.js
        continue-on-error: true  # Don't fail the pipeline if performance isn't perfect
      
      - name: Report results
        run: |
          echo "Performance test completed. Check the logs for details."

