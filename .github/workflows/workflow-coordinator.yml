name: Workflow Coordinator

# This workflow helps coordinate and validate dependencies between other workflows
# It can be used to check workflow status and ensure proper sequencing

on:
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of dependency check to perform'
        required: true
        type: choice
        options:
          - 'validate-sequence'
          - 'check-staging-ready'
          - 'check-promotion-ready'
          - 'check-production-ready'
        default: 'validate-sequence'
      target_branch:
        description: 'Branch to check (default: current branch)'
        required: false
        type: string
        default: ''

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  TARGET_BRANCH: ${{ inputs.target_branch || github.ref_name }}

jobs:
  validate-workflow-sequence:
    name: Validate Workflow Dependencies
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.check_type == 'validate-sequence' }}
    outputs:
      sequence_valid: ${{ steps.validate.outputs.valid }}
      next_workflow: ${{ steps.validate.outputs.next_workflow }}
      recommendations: ${{ steps.validate.outputs.recommendations }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Validate workflow sequence
        id: validate
        run: |
          echo "🔍 Validating workflow dependencies and sequencing..."
          echo ""
          
          # Define the expected workflow sequence
          echo "📋 Expected Workflow Sequence:"
          echo "1. 🔨 Docker Build (docker-build.yml) - Builds staging images"
          echo "2. 🚀 Staging Deploy (stg-deploy.yml) - Deploys to staging"
          echo "3. ✅ Image Promotion (image-promotion.yml) - Promotes staging → production"
          echo "4. 🌟 Production Deploy (prod-deploy.yml) - Deploys promoted images"
          echo "5. 🔄 Rollback (rollback.yml) - Emergency rollback if needed"
          echo ""
          
          # Check for workflow files existence
          WORKFLOWS_DIR=".github/workflows"
          REQUIRED_WORKFLOWS=(
            "docker-build.yml"
            "stg-deploy.yml" 
            "image-promotion.yml"
            "prod-deploy.yml"
            "rollback.yml"
          )
          
          ALL_EXIST=true
          for workflow in "${REQUIRED_WORKFLOWS[@]}"; do
            if [ -f "$WORKFLOWS_DIR/$workflow" ]; then
              echo "✅ Found: $workflow"
            else
              echo "❌ Missing: $workflow"
              ALL_EXIST=false
            fi
          done
          
          if [ "$ALL_EXIST" = "true" ]; then
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "next_workflow=staging-ready-check" >> $GITHUB_OUTPUT
            echo "recommendations=All required workflows found. Sequence validation complete." >> $GITHUB_OUTPUT
            echo ""
            echo "🎉 Workflow sequence validation PASSED"
          else
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "next_workflow=fix-missing-workflows" >> $GITHUB_OUTPUT
            echo "recommendations=Some required workflows are missing. Please ensure all workflows are present." >> $GITHUB_OUTPUT
            echo ""
            echo "❌ Workflow sequence validation FAILED"
          fi

  check-staging-readiness:
    name: Check Staging Deployment Readiness
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.check_type == 'check-staging-ready' }}
    outputs:
      staging_ready: ${{ steps.check.outputs.ready }}
      blocking_issues: ${{ steps.check.outputs.issues }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Check staging readiness
        id: check
        run: |
          echo "🔍 Checking if staging deployment is ready..."
          echo ""
          
          # Check if staging images exist
          echo "📋 Checking for staging images..."
          
          # This would typically check the container registry for staging images
          # For now, we'll simulate the check
          STAGING_READY=true
          ISSUES=""
          
          # Check if staging branch exists
          if git show-ref --verify --quiet refs/remotes/origin/staging; then
            echo "✅ Staging branch exists"
          else
            echo "❌ Staging branch missing"
            STAGING_READY=false
            ISSUES="staging-branch-missing"
          fi
          
          # Check if Dockerfile exists
          if [ -f "Dockerfile" ]; then
            echo "✅ Dockerfile exists"
          else
            echo "❌ Dockerfile missing"
            STAGING_READY=false
            ISSUES="$ISSUES,dockerfile-missing"
          fi
          
          echo "ready=$STAGING_READY" >> $GITHUB_OUTPUT
          echo "issues=$ISSUES" >> $GITHUB_OUTPUT
          
          if [ "$STAGING_READY" = "true" ]; then
            echo "🎉 Staging deployment is READY"
          else
            echo "❌ Staging deployment is NOT READY"
            echo "Issues: $ISSUES"
          fi

  check-promotion-readiness:
    name: Check Image Promotion Readiness  
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.check_type == 'check-promotion-ready' }}
    outputs:
      promotion_ready: ${{ steps.check.outputs.ready }}
      staging_image_available: ${{ steps.check.outputs.image_available }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check promotion readiness
        id: check
        run: |
          echo "🔍 Checking if image promotion is ready..."
          echo ""
          
          # Check if staging image exists
          STAGING_IMAGE="ghcr.io/${{ github.repository }}:staging"
          echo "📋 Checking for staging image: $STAGING_IMAGE"
          
          if docker pull "$STAGING_IMAGE" >/dev/null 2>&1; then
            echo "✅ Staging image is available"
            IMAGE_AVAILABLE=true
            
            # Get image details
            IMAGE_SIZE=$(docker images --format "{{.Size}}" "$STAGING_IMAGE" | head -1)
            IMAGE_CREATED=$(docker images --format "{{.CreatedAt}}" "$STAGING_IMAGE" | head -1)
            
            echo "📊 Image Details:"
            echo "- Size: $IMAGE_SIZE"
            echo "- Created: $IMAGE_CREATED"
            
            PROMOTION_READY=true
          else
            echo "❌ Staging image not available"
            IMAGE_AVAILABLE=false
            PROMOTION_READY=false
          fi
          
          echo "ready=$PROMOTION_READY" >> $GITHUB_OUTPUT
          echo "image_available=$IMAGE_AVAILABLE" >> $GITHUB_OUTPUT
          
          if [ "$PROMOTION_READY" = "true" ]; then
            echo "🎉 Image promotion is READY"
            echo ""
            echo "Next steps:"
            echo "1. Review staging deployment and test results"
            echo "2. Manually trigger image promotion workflow"
            echo "3. Specify staging image tag and promotion reason"
          else
            echo "❌ Image promotion is NOT READY"
            echo ""
            echo "Required actions:"
            echo "1. Ensure staging deployment completes successfully"
            echo "2. Verify staging image is built and pushed to registry"
            echo "3. Run staging tests to validate functionality"
          fi

  check-production-readiness:
    name: Check Production Deployment Readiness
    runs-on: ubuntu-latest  
    if: ${{ github.event.inputs.check_type == 'check-production-ready' }}
    outputs:
      production_ready: ${{ steps.check.outputs.ready }}
      promoted_image_available: ${{ steps.check.outputs.image_available }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check production readiness
        id: check
        run: |
          echo "🔍 Checking if production deployment is ready..."
          echo ""
          
          # Check if promoted image exists
          PROMOTED_IMAGE="ghcr.io/${{ github.repository }}:main"
          echo "📋 Checking for promoted image: $PROMOTED_IMAGE"
          
          if docker pull "$PROMOTED_IMAGE" >/dev/null 2>&1; then
            echo "✅ Promoted image is available"
            IMAGE_AVAILABLE=true
            
            # Get image details
            IMAGE_DIGEST=$(docker images --digests "$PROMOTED_IMAGE" --format "{{.Digest}}" | head -1)
            IMAGE_SIZE=$(docker images --format "{{.Size}}" "$PROMOTED_IMAGE" | head -1)
            IMAGE_CREATED=$(docker images --format "{{.CreatedAt}}" "$PROMOTED_IMAGE" | head -1)
            
            echo "📊 Promoted Image Details:"
            echo "- Digest: $IMAGE_DIGEST"
            echo "- Size: $IMAGE_SIZE"  
            echo "- Created: $IMAGE_CREATED"
            
            PRODUCTION_READY=true
          else
            echo "❌ Promoted image not available"
            IMAGE_AVAILABLE=false
            PRODUCTION_READY=false
          fi
          
          echo "ready=$PRODUCTION_READY" >> $GITHUB_OUTPUT
          echo "image_available=$IMAGE_AVAILABLE" >> $GITHUB_OUTPUT
          
          if [ "$PRODUCTION_READY" = "true" ]; then
            echo "🎉 Production deployment is READY"
            echo ""
            echo "Next steps:"
            echo "1. Review promoted image details above"
            echo "2. Manually trigger production deployment workflow"
            echo "3. Specify promoted image tag for deployment"
            echo "4. Monitor deployment progress and verify success"
          else
            echo "❌ Production deployment is NOT READY"
            echo ""
            echo "Required actions:"
            echo "1. Complete image promotion workflow successfully"
            echo "2. Verify promoted images are available in registry"
            echo "3. Ensure manual approval has been granted for promotion"
            echo "4. Check that all promotion validations passed"
          fi

  generate-coordination-report:
    name: Generate Workflow Coordination Report
    runs-on: ubuntu-latest
    needs: [validate-workflow-sequence, check-staging-readiness, check-promotion-readiness, check-production-readiness]
    if: always()
    steps:
      - name: Generate comprehensive report
        run: |
          echo "## 📊 Workflow Coordination Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Check Type:** ${{ github.event.inputs.check_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Branch:** ${{ env.TARGET_BRANCH }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Report results based on which job ran
          case "${{ github.event.inputs.check_type }}" in
            "validate-sequence")
              if [ "${{ needs.validate-workflow-sequence.outputs.sequence_valid }}" = "true" ]; then
                echo "**Sequence Validation:** ✅ PASSED" >> $GITHUB_STEP_SUMMARY
              else
                echo "**Sequence Validation:** ❌ FAILED" >> $GITHUB_STEP_SUMMARY
              fi
              echo "**Recommendations:** ${{ needs.validate-workflow-sequence.outputs.recommendations }}" >> $GITHUB_STEP_SUMMARY
              ;;
            "check-staging-ready")
              if [ "${{ needs.check-staging-readiness.outputs.staging_ready }}" = "true" ]; then
                echo "**Staging Readiness:** ✅ READY" >> $GITHUB_STEP_SUMMARY
              else
                echo "**Staging Readiness:** ❌ NOT READY" >> $GITHUB_STEP_SUMMARY
                echo "**Issues:** ${{ needs.check-staging-readiness.outputs.blocking_issues }}" >> $GITHUB_STEP_SUMMARY
              fi
              ;;
            "check-promotion-ready")
              if [ "${{ needs.check-promotion-readiness.outputs.promotion_ready }}" = "true" ]; then
                echo "**Promotion Readiness:** ✅ READY" >> $GITHUB_STEP_SUMMARY
              else
                echo "**Promotion Readiness:** ❌ NOT READY" >> $GITHUB_STEP_SUMMARY
              fi
              echo "**Staging Image Available:** ${{ needs.check-promotion-readiness.outputs.staging_image_available }}" >> $GITHUB_STEP_SUMMARY
              ;;
            "check-production-ready")
              if [ "${{ needs.check-production-readiness.outputs.production_ready }}" = "true" ]; then
                echo "**Production Readiness:** ✅ READY" >> $GITHUB_STEP_SUMMARY
              else
                echo "**Production Readiness:** ❌ NOT READY" >> $GITHUB_STEP_SUMMARY
              fi
              echo "**Promoted Image Available:** ${{ needs.check-production-readiness.outputs.promoted_image_available }}" >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow Dependencies:**" >> $GITHUB_STEP_SUMMARY
          echo "1. 🔨 **Docker Build** → Builds staging images from code changes" >> $GITHUB_STEP_SUMMARY
          echo "2. 🚀 **Staging Deploy** → Deploys and tests staging images" >> $GITHUB_STEP_SUMMARY  
          echo "3. ✅ **Image Promotion** → Promotes tested staging images to production tags" >> $GITHUB_STEP_SUMMARY
          echo "4. 🌟 **Production Deploy** → Deploys promoted images to production" >> $GITHUB_STEP_SUMMARY
          echo "5. 🔄 **Rollback** → Emergency rollback using previous images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Quick Actions:**" >> $GITHUB_STEP_SUMMARY
          echo "- [🔨 Trigger Docker Build](https://github.com/${{ github.repository }}/actions/workflows/docker-build.yml)" >> $GITHUB_STEP_SUMMARY
          echo "- [🚀 Trigger Staging Deploy](https://github.com/${{ github.repository }}/actions/workflows/stg-deploy.yml)" >> $GITHUB_STEP_SUMMARY
          echo "- [✅ Trigger Image Promotion](https://github.com/${{ github.repository }}/actions/workflows/image-promotion.yml)" >> $GITHUB_STEP_SUMMARY
          echo "- [🌟 Trigger Production Deploy](https://github.com/${{ github.repository }}/actions/workflows/prod-deploy.yml)" >> $GITHUB_STEP_SUMMARY
          echo "- [🔄 Trigger Rollback](https://github.com/${{ github.repository }}/actions/workflows/rollback.yml)" >> $GITHUB_STEP_SUMMARY
